"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.0.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import hashlib
from datetime import datetime, timedelta

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

PROJECT_DIR = os.path.dirname(BASE_DIR)

DEBUG = True

ALLOWED_HOSTS = []

SITE_ID = 1

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'j92=-#w6dg14wfj^3-{}'.format(hashlib.md5(os.environ.get('PROJECT_NAME', '').encode('utf-8')))

# SECURITY WARNING: don't run with debug turned on in production!

# Application definition

INSTALLED_APPS = (
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'django.contrib.gis',

)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# ==============================================================================
# Logging
# ==============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(PROJECT_DIR, 'debug.log'),
        },
    },
    'loggers': {
        'django.request': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'backend.apps': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'backend.base': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}


# Installed apps

INSTALLED_APPS += (
    # Additional apps
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'django_filters',
    'constance',
    'constance.backends.database',
    'fontawesome',
    'ckeditor',
    'ckeditor_uploader',
    'sorl.thumbnail',
    # 'cities',
    'ajax_select',
    'nested_inline',
    # Project apps
    'backend.base',
    'backend.apps.users',
    # 'backend.apps.sitetree',
    # 'backend.apps.catalog',
    # 'backend.apps.statdata',
)

AUTH_USER_MODEL = 'users.User'


# Session

SESSION_COOKIE_AGE = 60 * 60 * 24 * 7 * 4

SESSION_COOKIE_DOMAIN = None

SESSION_SERIALIZER = 'django.contrib.sessions.serializers.PickleSerializer'

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'ru'

LANGUAGES = (
    ('en', 'English'),
    ('de', 'German'),
    ('ru', 'Русский'),
)

TIME_ZONE = 'Asia/Yekaterinburg'

USE_I18N = True

USE_L10N = True

USE_TZ = True

CITIES_POSTAL_CODES = ['RU']

CITIES_LOCALES = ['LANGUAGES']


# Static files

STATIC_URL = '/backstatic/'

MEDIA_URL = '/media/'

STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)
MEDIA_ROOT = os.path.join(PROJECT_DIR, 'public', 'media')

STATIC_ROOT = os.path.join(PROJECT_DIR, 'public', 'static')

STATICFILES_FINDERS = (
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
    'compressor.finders.CompressorFinder',
)

TOKEN_AUTH_COOKIE = 'usertoken'
TOKEN_EXPIRATION_DELTA = timedelta(days=365)

# ==============================================================================
# Django settings app
# ==============================================================================
CONSTANCE_BACKEND = 'constance.backends.database.DatabaseBackend'
# CONSTANCE_DATABASE_CACHE_BACKEND = 'default'
CONSTANCE_SUPERUSER_ONLY = False

CONSTANCE_CONFIG = {
    'SITE_NAME': ('', 'название'),
    'SITE_PHONE': ('телефон', 'SITE PHONE'),
    'SITE_EMAIL': ('email', 'SITE EMAIL'),
    'TAG_METATAGS': ('', 'метатэги', str,),
    'TAG_COUNTERS': ('', 'Счетчики', str,),
    'FEEDBACK_EMAIL': ('', 'Почта для уведомлений', str,),
}

# ==============================================================================
# Django icon
# ==============================================================================
FONTAWESOME_CSS_URL = '//maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css'  # absolute url
FONTAWESOME_PREFIX = 'fa'  # default is 'fa'


# ==============================================================================
# Django cke-editor
# ==============================================================================
CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'full',
        'width': 600,
        'height': 400,
    },
}
CKEDITOR_UPLOAD_PATH = "uploads/"


# ==============================================================================
# Django REST_FRAMEWORK
# ==============================================================================


REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ('django_filters.rest_framework.DjangoFilterBackend',),
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'backend.base.authentication.CookieTokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        # 'rest_framework.permissions.IsAuthenticated',
        'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    ),
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        # 'drf_renderer_xlsx.renderers.XLSXRenderer',
    ),
    'DEFAULT_PAGINATION_CLASS': 'backend.base.pagination.Paginator',
    'PAGE_SIZE': 10,
    'PAGINATE_BY_PARAM': 'page_size',
    'MAX_PAGINATE_BY': 1000,
    'MAX_PAGE_SIZE': 1000,
    'MIN_PAGE_SIZE': 1,
}


# Production settings
if os.environ.get('ENV') == 'production':
    from .production import *  # NOQA

# Develop settings
elif os.environ.get('ENV') == 'develop':
    from .develop import *  # NOQA

# Staging settings
elif os.environ.get('ENV') == 'staging':
    from .staging import *  # NOQA
